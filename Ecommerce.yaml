openapi: 3.0.0
info:
  title: ECommerce API
  version: 1.0.0
  description: APIs for managing products, categories, orders,cart, and user authentication in an ECommerce system
servers:
  - url: http://localhost:8080/api
paths:
  /products/{categoryId}:
    get:
      summary: Fetch Products by Category
      parameters:
        - in: path
          name: categoryId
          required: true
          description: ID of the category for which products are to be fetched
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                categoryLabel: "Electronics"
                products:
                  - title: "Laptop"
                    price: 1200
                    description: "High-performance laptop"
                    stock: 50
                  - title: "Smartphone"
                    price: 500
                    description: "Latest smartphone model"
                    stock: 100
        '404':
          description: Category not found
          content:
            application/json:
              example:
                error: "Category not found"

  /products/findbyid/{productId}:
    get:
      summary: Fetch Product by ID
      parameters:
        - in: path
          name: productId
          required: true
          description: ID of the product to be fetched
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                title: "Laptop"
                price: 1200
                description: "High-performance laptop"
                stock: 50
        '404':
          description: Product not found
          content:
            application/json:
              example:
                error: "Product not found"

  
  /categories:
    get:
      summary: Get a list of categories
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                label: "Electronics"
                value:  "Electronics"
                
        
 
  /order/{userId}:
    post:
      summary: Create a new order
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '201':
          description: Order created successfully
   
  /order/orderhistory{userId}:
    get:
      summary: Get details of order of specific user
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
  
  /order/orderdetails{orderId}:
    get:
      summary: Get details of specific order
      parameters:
        - in: path
          name: orderId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDetails'
   
  /cart/{userId}/{productId}:
    post:
      summary: Add Product to Cart of user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: User ID
        - name: productId
          in: path
          required: true
          schema:
            type: string
          description: Product ID
      requestBody:
        description: Request body for adding a product to the cart
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                   type: string
                price:
                    type: integer
                
                quantity:
                  type: integer
                  minimum: 1
                  description: Quantity of the product (default is 1)
      responses:
        '200':
          description: Product added to cart successfully
        '404':
          description: User or Product not found
        '500':
          description: Internal Server Error

  /cart/viewcart/{userId}:
    get:
      summary: View User's Cart
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: User ID
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    productId:
                      type: string
                      description: ID of the product in the cart
                    productName:
                      type: string
                      description: Name of the product
                    quantity:
                      type: integer
                      description: Quantity of the product
                    productPrice:
                      type: number
                      description: Price of the product
        '404':
          description: Cart not found
        '500':
          description: Internal Server Error

  /cart/updatequantity/{userId}/{productId}:
    patch:
      summary: Update Product Quantity in Cart
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: User ID
        - name: productId
          in: path
          required: true
          schema:
            type: string
          description: Product ID
      requestBody:
        description: Request body for updating product quantity in the cart
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: integer
                  minimum: 1
                  description: New quantity of the product in the cart
      responses:
        '200':
          description: Quantity updated successfully
        '404':
          description: Cart item not found
        '500':
          description: Internal Server Error

  /cart/removefromcart/{userId}/{productId}:
    delete:
      summary: Remove Product from Cart
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: User ID
        - name: productId
          in: path
          required: true
          schema:
            type: string
          description: Product ID
      responses:
        '200':
          description: Product removed from cart successfully
        '404':
          description: Cart item not found
        '500':
          description: Internal Server Error
 
  /auth:
    post:
      summary: Register a new user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegisterInput'
      responses:
        '201':
          description: User registered successfully
  /auth/login:
    post:
      summary: Authenticate and log in user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginInput'
      responses:
        '200':
          description: User logged in successfully
components:
  schemas:
    ProductInput:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        price:
          type: float
        stock:
          type: integer
        category:
          type: string
    CategoryInput:
      type: object
      properties:
        label:
          type: string
        value:
          type: string
   
    UserRegisterInput:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
        name:
          type: string
    UserLoginInput:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
 

    Product:
      type: object
      properties:
        title:
          type: string
       
        price:
          type: float
       
       
    
    ProductList:
      type: object
      properties:
        categoryLabel:
          type: string
        products:
         
          type: array
          items:
            $ref: "#/components/schemas/Product"
          
    Order:
      type: object
      properties:
        id:
           type: integer
           format: int64
           description: ID of the order
        user:
           type: integer
           description: ID of the user associated with the order
        items:
           type: array
           items:
             $ref: "#/components/schemas/ProductList"
           description: Array of items in the order
        totalAmount:
           type: number
           format: float
           description: Total amount of the order
        totalItems:
           type: integer
           description: Total number of items in the order

    Cart:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: ID of the cart item
        quantity:
          type: integer
          description: Quantity of the product in the cart
        product:
          type: integer
          description: ID of the product in the cart
        user:
          type: integer
          description: ID of the user associated with the cart item


    OrderDetails:
      type: object
      properties:
        id:
           type: integer
           format: int64
           description: ID of the order
        
        items:
           type: array
           items:
             $ref: "#/components/schemas/ProductList"
           description: Array of items in the order
       
        totalItems:
           type: integer
           description: Total number of items in the order   